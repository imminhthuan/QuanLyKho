@page "/donViTinh"
@using BlazorApp4.Service
@inject DonViTinhService donViTinhService
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<div class="row">
    <div class="col-lg-6">
        <h3>Quản lý Đơn Vị Tính</h3>
    </div>
    <div class="col-lg-6 text-end mb-2">
      <button class="btn btn-success" @onclick="() => { isEditing = false; newDonViTinh = new BlazorApp4.Models.DonViTinh(); ShowModalDonViTinh(); }">Thêm mới</button>
    </div>
</div>
<table class="table table-bordered">
    <thead class="text-center">
        <tr>
            <th>Tên Đơn Vị Tính</th>
            <th>Ghi Chú</th>
            <th></th>
        </tr>
    </thead>
    <tbody class="text-center">
        @if (donViTinhs != null)
        {
            @foreach (var donViTinh in donViTinhs)
            {
                <tr>
                    <td>@donViTinh.tenDonViTinh</td>
                    <td>@donViTinh.ghiChu</td>
                    <td>
                        <a @onclick="() => EditDonViTinh(donViTinh)" class="text-warning mr-3 cursor-pointer"><i class="fas fa-pencil-alt"></i></a>
                        <a @onclick="() => DeleteDonViTinh(donViTinh.donViTinh_Auto_ID)" class="text-danger cursor-pointer"><i class="fas fa-trash-alt"></i></a>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="4">No data available</td>
            </tr>
        }
    </tbody>
</table>


<div class="modal fade" id="donvitinhModal" tabindex="-1" aria-labelledby="loaisanphamModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="loaisanphamModalLabel">@(!isEditing ? "Thêm mới đơn vị tính" : "Chỉnh sửa đơn vị tính")</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="maLoaiSanPham">Tên Đơn Vị Tính:</label>
                    <input class="form-control" id="maLoaiSanPham" @bind="newDonViTinh.tenDonViTinh" />
                </div>
                <div class="form-group">
                    <label for="ghiChu">Ghi Chú:</label>
                    <input class="form-control" id="ghiChu" @bind="newDonViTinh.ghiChu" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CancelEdit">Hủy</button>
                <button type="button" class="btn btn-primary" @onclick="() => { if (isEditing) UpdateDonViTinh(); else AddDonViTinh(); }">@(!isEditing ? "Thêm mới" : "Lưu cập nhật")</button>
            </div>
        </div>
    </div>
</div>
<script>
    window.ShowModalDonViTinh = () => {
        $('#donvitinhModal').modal('show');
    };

    window.HiedModalDonViTinh = () => {
        $('#donvitinhModal').modal('hide');
    };
</script>
@code {
    private List<BlazorApp4.Models.DonViTinh> donViTinhs;
    private BlazorApp4.Models.DonViTinh newDonViTinh = new BlazorApp4.Models.DonViTinh();
    private bool isEditing = false;

    protected override async Task OnInitializedAsync()
    {
        donViTinhs = await donViTinhService.GetAllDonViTinhAsync();
    }

    private async Task AddDonViTinh()
    {
    
        if (string.IsNullOrWhiteSpace(newDonViTinh.tenDonViTinh))
        {
       
            Console.WriteLine("Tên đơn vị tính không được để trống.");
            return;
        }

        await donViTinhService.AddDonVitinhAsync(newDonViTinh);
        newDonViTinh = new BlazorApp4.Models.DonViTinh();
        donViTinhs = await donViTinhService.GetAllDonViTinhAsync();
        HiedModalDonViTinh();
        StateHasChanged();
    }

    private async Task UpdateDonViTinh()
    {
        
        if (string.IsNullOrWhiteSpace(newDonViTinh.tenDonViTinh))
        {
         
            Console.WriteLine("Tên đơn vị tính không được để trống.");
            return;
        }

        await donViTinhService.UpdateDonViTinhAsync(newDonViTinh.donViTinh_Auto_ID, newDonViTinh);
        newDonViTinh = new BlazorApp4.Models.DonViTinh();
        donViTinhs = await donViTinhService.GetAllDonViTinhAsync();
        isEditing = false;
        HiedModalDonViTinh();
        StateHasChanged();
    }

    private async Task DeleteDonViTinh(int id)
    {
        await donViTinhService.DeleteDonVitinhAsync(id);
        donViTinhs = await donViTinhService.GetAllDonViTinhAsync();
    }

    private void EditDonViTinh(BlazorApp4.Models.DonViTinh donViTinh)
    {
        newDonViTinh = new BlazorApp4.Models.DonViTinh
            {
                donViTinh_Auto_ID = donViTinh.donViTinh_Auto_ID,
                tenDonViTinh = donViTinh.tenDonViTinh,
                ghiChu = donViTinh.ghiChu
            };
        isEditing = true;
        ShowModalDonViTinh();
    }

    private void CancelEdit()
    {
        newDonViTinh = new BlazorApp4.Models.DonViTinh();
        isEditing = false;
    }

    private async Task ShowModalDonViTinh()
    {
        await JSRuntime.InvokeVoidAsync("ShowModalDonViTinh");
    }

    private async Task HiedModalDonViTinh()
    {
        await JSRuntime.InvokeVoidAsync("HiedModalDonViTinh");
    }
}
